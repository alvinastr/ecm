// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int       @id @default(autoincrement())
  email    String    @unique
  passwordHash String
  sessions Session[]
  cart Cart?
  reviews Review[]
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Session {
  id        String   @id
  userId    Int
  expiresAt DateTime

  user User @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model CartLineItem {
  id String @id
  sanityProductId String
  quantity Int

  title String
  price Float
  image String

  cartId String
  cart Cart @relation(references: [id], fields: [cartId], onDelete: Cascade)
}

model Cart{
  id String @id

  userId Int? @unique
  user User? @relation(references: [id], fields: [userId], onDelete: Cascade)

  items CartLineItem[]
}

model Review {
  id String @id @default(cuid())
  sanityProductId String
  rating Int // 1-5 stars
  title String?
  content String?
  verified Boolean @default(false) // Whether user actually purchased the product
  helpful Int @default(0) // Number of helpful votes
  
  userId Int
  user User @relation(references: [id], fields: [userId], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([sanityProductId, userId]) // Prevent duplicate reviews from same user
  @@index([sanityProductId])
  @@index([rating])
}